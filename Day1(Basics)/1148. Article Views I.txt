#SQL
select distinct author_id as id
from Views 
where author_id = viewer_id
order by author_id

#PANDAS
import pandas as pd

def article_views(views: pd.DataFrame) -> pd.DataFrame:
    processed_data = views[views['author_id'] == views['viewer_id']][['author_id']]
    processed_data.rename(columns={'author_id' : 'id'}, inplace = True)
    processed_data.drop_duplicates(inplace=True)
    processed_data.sort_values(by='id', inplace=True)
    
    return processed_data

#PYSPARK
from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, IntegerType, StringType
from pyspark.sql.functions import col

spark = SparkSession.builder.appName("ViewsTable").getOrCreate()

data = [
    (1, 3, 5, "2019-08-01"),
    (1, 3, 6, "2019-08-02"),
    (2, 7, 7, "2019-08-01"),
    (2, 7, 6, "2019-08-02"),
    (4, 7, 1, "2019-07-22"),
    (3, 4, 4, "2019-07-21"),
    (3, 4, 4, "2019-07-21")
]

schema = StructType([
    StructField("article_id", IntegerType(), True),
    StructField("author_id", IntegerType(), True),
    StructField("viewer_id", IntegerType(), True),
    StructField("view_date", StringType(), True)
])

views = spark.createDataFrame(data, schema)

processed_data = views.where(col('author_id') == col('viewer_id')).select(col('author_id').alias('id')).distinct().sort('author_id')
processed_data.show()